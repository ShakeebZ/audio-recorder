/*
 * audio_recorder.c
 *
 * Main source file. Contains main() and menu() functions.
 */
#include "audio_recorder.h"

/* ---------------------------------------------------------------------------- *
 * 									main()										*
 * ---------------------------------------------------------------------------- *
 * Runs all initial setup functions to initialise the audio codec and IP
 * peripherals, before calling the interactive menu system.
 * ---------------------------------------------------------------------------- */
int main(void)
{
	int status;
	u32 ind = 0;
	audioArray = (u32*) 0x018E0000;
	audioUpperBound = (u32*) 0x018E0000 + 2*NUM_SECONDS*192000*sizeof(u32);
	PLAYBACK_RATE = 4;

	xil_printf("Entering Main\r\n");
	//Configure the IIC data structure
	IicConfig(XPAR_XIICPS_0_DEVICE_ID);
	xil_printf("IIC Configured\r\n");
	//Configure the Audio Codec's PLL
	AudioPllConfig();
	xil_printf("Audio PLL Configured\r\n");

	//Configure the Line in and Line out ports.
	//Call LineInLineOutConfig() for a configuration that
	//enables the HP jack too.
	AudioConfigureJacks();

	xil_printf("ADAU1761 configured\n\r");

	/* Initialise GPIO and NCO peripherals */
	gpio_init();

	xil_printf("GPIO peripheral configured\r\n");

	  //----------------------------------------------------
	  // SETUP THE TIMER
	  //----------------------------------------------------
	  status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);
	  if(status != XST_SUCCESS) return XST_FAILURE;
	  XTmrCtr_SetHandler(&TMRInst, TMR_Intr_Handler, &TMRInst);
	  XTmrCtr_SetResetValue(&TMRInst, 0, TMR_LOAD);
	  XTmrCtr_SetOptions(&TMRInst, 0, XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);

	xil_printf("Timer set up\r\n");

	// Initialize interrupt controller
	status = IntcInitFunction(INTC_DEVICE_ID, &TMRInst, &BTNInst);
	if(status != XST_SUCCESS) return XST_FAILURE;

	xil_printf("Interrupt Controller configured\r\n");

	xil_printf("\r\n\r\n");
	xil_printf("Embedded LMS Filtering Demo\r\n");
	xil_printf("Press BTNC to record audio, BTNL to decrease playback rate, BTNR to increase playback rate, BTND to stop recording audio, and BTNU to playback audio.\r\n");
	xil_printf("----------------------------------------\r\n");

	/* Display interactive menu interface via terminal */
	XTmrCtr_Start(&TMRInst, 0);

	while(1);
    return 1;
}

/* ---------------------------------------------------------------------------- *
 * 									menu()										*
 * ---------------------------------------------------------------------------- *
 * Presented at system startup. Allows the user to select between three
 * options by pressing certain keys on the keyboard:
 * 		's' - 	Audio loopback streaming
 * 		'n' - 	Tonal noise is generated by an NCO and added to the audio
 * 				being captured from the audio codec.
 * 		'f' - 	The audio + tonal noise is passed to an adaptive LMS noise
 * 				cancellation filter which will use the tonal noise estimate
 * 				to remove the noise from the audio.
 *
 * 	This menu is shown upon exiting from any of the above options.
 * ---------------------------------------------------------------------------- */
void menu(){
	u8 inp = 0x00;
	u32 CntrlRegister;

	CntrlRegister = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_CR_OFFSET);

	XUartPs_WriteReg(UART_BASEADDR, XUARTPS_CR_OFFSET,
				  ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
				   XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));

	xil_printf("\r\n\r\n");
	xil_printf("Embedded LMS Filtering Demo\r\n");
	xil_printf("Press BTNC to record audio, BTNL to decrease playback rate, BTNR to increase playback rate, BTND to stop recording audio, and BTNU to playback audio.\r\n");
	xil_printf("Press 'q' to quit.\r\n");
	xil_printf("----------------------------------------\r\n");

	// Wait for input from UART via the terminal
	while (!XUartPs_IsReceiveData(UART_BASEADDR));
				inp = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
	// Select function based on UART input
	switch(inp){
	case 'q':
		break;
	default:
		menu();
		break;
	} // switch
} // menu()


